# URL : http://www.geeksforgeeks.org/custom-tree-problem/
from _collections import deque

class Node:
    def __init__(self, data, left, right):
        self.data = data
        self.left = left
        self.right = right

def getTreeUsingInorderPreorderUtil(inorder, preorder, ins, ine, pres):
    if ins > ine:
        return None
    elif ins == ine:
        return Node(inorder[ins], None, None)
    else:
        node = Node(preorder[pres], None, None)
        index = inorder.index(preorder[pres])
        node.left = getTreeUsingInorderPreorderUtil(inorder, preorder, ins, index - 1, pres + 1)
        node.right = getTreeUsingInorderPreorderUtil(inorder, preorder, index + 1, ine, pres + index - ins + 1)
        return node
        

def getTreeUsingInorderPreorder(inorder, preorder):
    if len(inorder):
        return getTreeUsingInorderPreorderUtil(inorder, preorder, 0, len(inorder) - 1, 0)
        

def getPostorderUsingInorderPreorder(inorder, preorder, ins, ine, pres):
    if ins > ine:
        return deque([])
    elif ins == ine:
        return deque([inorder[ins]])
    else:
        d = deque()
        
        

def getPostorderUsingInorderPreorder(inorder, preorder):
    if len(inorder):
        return 

def postTraversal(root):
    if root is not None:
        postTraversal(root.left)
        postTraversal(root.right)
        print root.data,


if __name__ == '__main__':
    inorder = [4, 2, 5, 1, 3, 6]
    preorder = [1, 2, 4, 5, 3, 6]
    root = getTreeUsingInorderPreorder(inorder, preorder)
    postTraversal(root)
    
    
