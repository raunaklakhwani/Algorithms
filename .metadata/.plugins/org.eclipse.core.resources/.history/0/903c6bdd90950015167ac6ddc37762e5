from _collections import deque
class Node:
    def __init__(self, data, left, right):
        self.data = data
        self.left = left
        self.right = right

def constructTree(d, key):
    if d.get(key) is None:
        return Node(key, None, None)
    else:
        root = Node(key, None, None)
        child = d[key]
        if len(child) == 1:
            if child[0] is not None:
                root.left = constructTree(d, child[0])
        elif len(child) == 2:
            if child[0] is not None:
                root.left = constructTree(d, child[0])
            if child[1] is not None:
                root.right = constructTree(d, child[1])
        return root
    
def getTreeDict():
    #===========================================================================
    # d = {}
    # d[1] = [2,3]
    # d[2] = [4,5]
    # d[3] = [6]
    # d[4] = [7,8]
    # return d
    #===========================================================================

    #===========================================================================
    # d = {}
    # d[1] = [2, 3]
    # d[2] = [4, 5]
    # d[3] = [6, 7]
    # d[4] = [8, 9]
    # d[6] = [10, 11]
    # return d
    #===========================================================================

    #===========================================================================
    # d = {}
    # d[1] = [2]
    # d[2] = [3,4]
    # return d
    #===========================================================================
    
    d = {}
    d[10] = [20, 30]
    d[20] = [40, 50]
    d[30] = [None, 60]
    d[50] = [70, 80]
    return d


def inorder(root):
    if root is not None:
        inorder(root.left)
        print root.data,
        inorder(root.right)


def vertexCover(root):
    '''
    Time complexity of this algorithm is exponential as same problem is recomputed again and again.
    You can use dynamic programming to store the results of the subtree and then it will be O(n)
    '''
    if root is None:
        return 0
    elif root.left is None and root.right is None:
        return 1
    else:
        # Include root
        left = vertexCover(root.left)
        right = vertexCover(root.right)
        
        s = 1
        if root.left is not None:
            s += (vertexCover(root.left.left) + vertexCover(root.left.right))
        if root.right is not None:
            s += (vertexCover(root.right.left) + vertexCover(root.right.right))
            
        return min(left + right, s)  
    
    
      

if __name__ == '__main__':
    root = constructTree(getTreeDict(), 10)
    inorder(root)
    print 
    print "____________________________"
    print vertexCover(root)
    
    
