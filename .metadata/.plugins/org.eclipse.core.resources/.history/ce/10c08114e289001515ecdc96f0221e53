class Solution(object):
    
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        
        def getKthElement(A, B, k):
            print A, B, k
            if len(A) == 0:
                return B[k - 1]
            elif len(A) > len(B):
                return getKthElement(B, A, k)
            elif k == 1:
                return min(A[0], B[0])
            else:
                mid1 = min(k >> 1, len(A))
                mid2 = k - mid1
                if A[mid1 - 1] <= B[mid2 - 1]:
                    return getKthElement(A[mid2:], B, mid1)
                else:
                    return getKthElement(A, B[mid1:], mid2)
                
        
        la = len(nums1)
        lb = len(nums2)
        totalLength = la + lb
        
        if totalLength & 1:
            k = totalLength >> 1
            return getKthElement(nums1, nums2, k + 1)
        else:
            k1 = totalLength >> 1
            e1 = getKthElement(nums1, nums2, k1)
            e2 = getKthElement(nums1, nums2, k1 + 1)
            print e1, e2
            return (e1 + e2) * 0.5
            
            
        
        

if __name__ == '__main__':
    s = Solution()
    s.findMedianSortedArrays([1, 2], [1, 2])
