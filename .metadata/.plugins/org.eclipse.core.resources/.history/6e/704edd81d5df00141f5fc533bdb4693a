
from pprint import pprint
import heapq
class Graph:
    def __init__(self, edges):
        self.adjacencyList = {}
        for edge in edges:
            source,destination,cost = edge
            self.adjacencyList.setdefault(source,[]).append((destination,cost))
            
    def dijkstra(self,source,target):
        x = [source]
        shortestPath = {source:0}
        heap = []
        for destination,cost in self.adjacencyList[source]:
            heapq.heappush(heap, (cost,destination,source))
            
            
        while target not in x:
            cost,destination,src = heapq.heappop(heap)
            while shortestPath.get(destination) is not None:
                cost,destination,src = heapq.heappop(heap)
            shortestPath[destination] = shortestPath[src] + cost
            x.append(destination)
            for d,c in self.adjacencyList.get(destination,[]):
                heapq.heappush(heap, (c,d,destination))
            
        
        
        return shortestPath.get(target,-1)
        
        


if __name__ == '__main__':
    graph = Graph([("a", "b", 7),  ("a", "c", 9),  ("a", "f", 14), ("b", "c", 10),
               ("b", "d", 15), ("c", "d", 11), ("c", "f", 2),  ("d", "e", 6),
               ("e", "f", 9)])
    pprint(graph.adjacencyList)
    
    
    pprint(graph.dijkstra("a", "e"))
    vertices = graph.adjacencyList.keys()
    for sourceVertex in vertices:
        for destinationVertex in vertices:
            pprint(sourceVertex + " -- >" + destinationVertex + " == " +  str(graph.dijkstra(sourceVertex, destinationVertex)))
    
    