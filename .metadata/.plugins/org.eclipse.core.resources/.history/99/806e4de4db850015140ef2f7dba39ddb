'''
2
2 4 1
2 1 -2 -1
3 3
-2 1
1 3 1
1 -1 -2
-2 2
'''

from math import ceil

maxAns = float("inf")
def getResult():
    print
        


def recurse(B, H, E, bal, velo, curr,time):
    global maxAns
    #print B, H, E, bal, velo, curr,time
    if curr == B:
        maxAns = min(maxAns,time)
        return 
    if bal[curr][0] > 0 and velo[bal[curr][1]] < 0:
        for i in xrange(bal[curr][1], H):
            if i - bal[curr][1] > E:
                break
            else:
                if velo[i] < 0:
                    bal[curr][1] = i
                    diff = i - bal[curr][1]
                    req = int(ceil(abs(bal[curr][0]) / abs(velo[bal[curr][1]])))
                    recurse(B, H, E - diff, bal, velo, curr + 1, time + req)
                    bal[curr][1] = i
                    
        for i in xrange(bal[curr][1] - 1, -1, -1):
            if abs(i - bal[curr][1]) > E:
                break
            else:
                if velo[i] < 0:
                    bal[curr][1] = i
                    diff = abs(i - bal[curr][1])
                    req = int(ceil(abs(bal[curr][0]) / abs(velo[bal[curr][1]])))
                    recurse(B, H, E - diff, bal, velo, curr + 1, time + req)
                    bal[curr][1] = i
        
    elif bal[curr][0] < 0 and velo[bal[curr][1]] > 0:
        
        for i in xrange(bal[curr][1], H):
            if abs(i - bal[curr][1]) > E:
                break
            else:
                if velo[i] > 0:
                    bal[curr][1] = i
                    diff = abs(i - bal[curr][1])
                    req = int(ceil(abs(bal[curr][0]) / abs(velo[bal[curr][1]])))
                    recurse(B, H, E - diff, bal, velo, curr + 1,time + req)
                    bal[curr][1] = i
        for i in xrange(bal[curr][1] - 1, -1, -1):
            if abs(i - bal[curr][1]) > E:
                break
            else:
                if velo[i] > 0:
                    bal[curr][1] = i
                    diff = abs(i - bal[curr][1])
                    req = int(ceil(abs(bal[curr][0]) / abs(velo[bal[curr][1]])))
                    recurse(B, H, E - diff, bal, velo, curr + 1,time + req)
                    bal[curr][1] = i
                    
        
        
    elif bal[curr][0] < 0 and velo[bal[curr][1]] < 0:
        
        for i in xrange(bal[curr][1] + 1, H):
            if abs(i - bal[curr][1]) > E:
                break
            else:
                if velo[i] > 0:
                    bal[curr][1] = i
                    diff = abs(i - bal[curr][1])
                    req = int(ceil(abs(bal[curr][0]) / abs(velo[bal[curr][1]])))
                    recurse(B, H, E - diff, bal, velo, curr + 1,time + req)
                    bal[curr][1] = i
        for i in xrange(bal[curr][1] - 1, -1, -1):
            if abs(i - bal[curr][1]) > E:
                break
            else:
                if velo[i] > 0:
                    bal[curr][1] = i
                    diff = abs(i - bal[curr][1])
                    req = int(ceil(abs(bal[curr][0]) / abs(velo[bal[curr][1]])))
                    recurse(B, H, E - diff, bal, velo, curr + 1,time + req)
                    bal[curr][1] = i
                    
    elif bal[curr][0] > 0 and velo[bal[curr][1]] > 0:
        for i in xrange(bal[curr][1] + 1, H):
            if abs(i - bal[curr][1]) > E:
                break
            else:
                if velo[i] < 0:
                    bal[curr][1] = i
                    diff = abs(i - bal[curr][1])
                    req = int(ceil(abs(bal[curr][0]) / abs(velo[bal[curr][1]])))
                    recurse(B, H, E - diff, bal, velo, curr + 1,time + req)
                    bal[curr][1] = i
        for i in xrange(bal[curr][1] - 1, -1, -1):
            if abs(i - bal[curr][1]) > E:
                break
            else:
                if velo[i] < 0:
                    bal[curr][1] = i
                    diff = abs(i - bal[curr][1])
                    req = int(ceil(abs(bal[curr][0]) / abs(velo[bal[curr][1]])))
                    recurse(B, H, E - diff, bal, velo, curr + 1,time + req)
                    bal[curr][1] = i
        
        
    
    

if __name__ == '__main__':
    with open("fourth.txt", "w+") as f:
        for t in xrange(input()):
            
            
            B, H, E = map(int, raw_input().split())
            velo = map(int, raw_input().split())
            
            bal = []
            for i in xrange(B):
                bal.append(map(int, raw_input().split()))
            
            maxAns = float("inf")    
            recurse(B, H, E, bal, velo, 0, 0)
            result = str(maxAns) if maxAns != float("inf") else "IMPOSSIBLE"
            print result
                
            
            
                
            
            
            
            #result = getResult()
            
            out = "Case #" + str(t + 1) + ": " + result + "\n"
            f.write(out)
