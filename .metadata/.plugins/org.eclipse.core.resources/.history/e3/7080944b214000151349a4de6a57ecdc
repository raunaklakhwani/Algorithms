class Node:
    def __init__(self, data, previous, next):
        self.data = data
        self.previous = previous
        self.next = next


def inorder(root):
    if root is not None:
        inorder(root.previous)
        print root.data,
        inorder(root.next)
        
def getBSTUtil(inp, start, end):
    if start > end:
        return None
    elif start == end:
        return Node(inp[start], None, None)
    else:
        mid = start + (end - start) / 2
        left = getBSTUtil(inp, start, mid - 1)
        right = getBSTUtil(inp, mid + 1, end)
        node = Node(inp[mid], left, right)
        return node
        

def getBST(inp):
    root = getBSTUtil(inp, 0, len(inp) - 1)
    return root 

    
if __name__ == '__main__':
    inp = [-5, 1, 3, 5, 6, 7, 10, 12, 20]
    root = getBST(inp)
    inorder(root)
    
    
