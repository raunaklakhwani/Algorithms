file = '''Welcome to the world of Geeks 
This portal has been created to provide well written well thought and well explained 
solutions for selected questions If you like Geeks for Geeks and would like to contribute 
here is your chance You can write article and mail your article to contribute at 
geeksforgeeks org See your article appearing on the Geeks for Geeks main page and help 
thousands of other Geeks'''


class TrieNode:
    def __init__(self):
        self.frequency = 0
        self.indexMinHeap = -1
        self.isEnd = False
        self.childs = [None] * 26
        
class MinHeapNode:
    def __init__(self):
        self.node = None
        self.frequency = 0
        self.word = None
        
        
def swap(li, a, b):
    li[a], li[b] = li[b], li[a]
    
    
def insertInHeap(node):
    if node.indexMinHeap == -1:
        if len(heap) < K:
            print "Insert in heap"
        else:
            "Check the frequency with top adn if it is greater than that than delete and insert this element"
    else:
        print "Increase the frequency and percolate down"
        
        
def percolateDown(node,index):
    child1 = 2 * index + 1
    child2 = (child1 + 1) if (child1 + 1) < len(heap) else 0
    minchild = child1
    if child2 != 0 and child2.frequency > child1.frequency:
        minchild = child2
    while minchild < len(heap) and heap[minchild].frequency > heap[index].frequency:
        heap[index],heap[minchild] = heap[minchild],heap[index]
        index = minchild
        child1 = 2 * index + 1
        child2 = (child1 + 1) if (child1 + 1) < len(heap) else 0
        minchild = child1
        if child2 != 0 and child2.frequency > child1.frequency:
            minchild = child2
            
            
def percolateup(node,index):
    child1 = 2 * index + 1
    child2 = (child1 + 1) if (child1 + 1) < len(heap) else 0
    minchild = child1
    if child2 != 0 and child2.frequency > child1.frequency:
        minchild = child2
        
    while minchild >= 0 and heap[minchild].frequency > heap[index].frequency:
        heap[index],heap[minchild] = heap[minchild],heap[index]
        index = (index - 1) >> 1
         
    
        
        
        
    
        
    
    
    
def insertInTrieUtil(root, word, index):
    if root is None:
        root = TrieNode()
        
    if index == len(word):
        root.isEnd = True
        root.frequency += 1
        insertInHeap(root)
    else:
        ni = ord(word[index] - 97)
        root.childs[ni] = insertInTrieUtil(root.childs[ni], word, index + 1)
        
    
    return root
    

def insertInTrie(root, word):
    return insertInTrieUtil(root, word, 0)



root = None
heap = []
K = 5
for word in file.split():
    root = insertInTrie(root, word.lower())
