class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        
        def swap(i,j,nums):
            nums[i],nums[j] = nums[j],nums[i]
        
        def partition(nums,s,e):
            key = nums[s]
            start = s + 1
            
            j = start
            for i in xrange(start,e):
                print nums[i],nums[j]
                if key > nums[i]:
                    swap(i,j,nums)
                    j += 1
            else:
                swap(j-1,s,nums)
            
            return j - 1
         
        
        def recurse(nums,s,e,k):  
            if  k == 0:
                return nums[s]
            else:
                pos = partition(nums, s, e)
                if pos == k:
                    return nums[pos]
                elif k < pos:
                    return recurse(nums, s, pos, k)
                else:
                    return recurse(nums, pos + 1, e, k - pos)
        
        return recurse(nums, 0, len(nums), k - 1)
               
        
            
                    
                
                
                
        
        
if __name__ == '__main__':
    s = Solution()
    print s.findKthLargest([5,8,7,1,3,4], 3)