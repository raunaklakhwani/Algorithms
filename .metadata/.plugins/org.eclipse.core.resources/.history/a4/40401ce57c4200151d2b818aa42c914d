# URL : http://www.geeksforgeeks.org/print-left-view-binary-tree/
class Node:
    def __init__(self, data, left, right):
        self.data = data
        self.left = left
        self.right = right
        
def constructTree(d, key):
    if d.get(key) is None:
        return Node(key, None, None)
    else:
        root = Node(key, None, None)
        child = d[key]
        if len(child) == 1:
            if child[0] is not None:
                root.left = constructTree(d, child[0])
        elif len(child) == 2:
            if child[0] is not None:
                root.left = constructTree(d, child[0])
            if child[1] is not None:
                root.right = constructTree(d, child[1])
        return root
    
def inOrderUtil(root):
    if root is not None:
        inOrderUtil(root.left)
        print root.data,
        inOrderUtil(root.right)
        
def inOrder(root):
    print "InOrder = ",
    inOrderUtil(root)
    print 


def postTraversal(root):
    if root is not None:
        postTraversal(root.left)
        postTraversal(root.right)
        print root.data,


if __name__ == '__main__':
    
    
