class Solution(object):
    def getSkyline(self, b):
        """
        :type buildings: List[List[int]]
        :rtype: List[List[int]]
        """
        
        
        def divide(b,s,e):
            if s == e:
                res = []
                res.append((b[s][0],b[s][2]))
                res.append((b[s][1],0))
                return res
            elif s < e:
                mid = s + ((e - s) >> 1)
                r1 = divide(b,s,mid)
                r2 = divide(b,mid + 1,e)
                res = merge(r1,r2)
                return res
            else:
                return []
                
        def merge(r1,r2):
            res = []
            l = 0
            r = 0
            fh = 0
            sh = 0
            while l < len(r1) and r < len(r2):
                
                if r1[l][0] < r2[r][0]:
                    a1,fh = r1[l]
                    h = max(fh,sh)
                    if not len(res) or (res[-1][1]!= h)
                    res.append((a1,h))
                    l += 1
                else:
                    a2,sh = r2[r]
                    h = max(fh,sh)
                    res.append((a2,h))
                    r += 1
                
                    
            while l < len(r1):
                a1,fh = r1[l]
                h = max(fh,sh)
                res.append((a1,h))
                l += 1
                
            while r < len(r2):
                a2,sh = r2[r]
                h = max(fh,sh)
                res.append((a2,h))
                r += 1
                    
            return res
            
        N = len(b)    
        result = divide(b,0,N - 1)
        return result        
        
        
if __name__ == '__main__':
    s = Solution()
    print s.getSkyline([[2, 9, 10], [3, 7, 15], [5, 12, 12], [15, 20, 10], [19, 24, 8]])
    
