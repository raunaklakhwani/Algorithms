from _collections import deque
class Node:
    
    def __init__(self, data, left, right):
        self.data = data
        self.left = left
        self.right = right


def getTreeDict():
    #===========================================================================
    # d = {}
    # d[1] = [2,3]
    # d[2] = [4,5]
    # d[3] = [6]
    # d[4] = [7,8]
    # return d
    #===========================================================================

    d = {}
    d[1] = [2,3]
    d[2] = [4,5]
    d[4] = [7]
    return d

def constructTree(d, key):
    if d.get(key) is None:
        return Node(key, None, None)
    else:
        root = Node(key, None, None)
        child = d[key]
        if len(child) == 1:
            if child[0] is not None:
                root.left = constructTree(d, child[0])
        elif len(child) == 2:
            if child[0] is not None:
                root.left = constructTree(d, child[0])
            if child[1] is not None:
                root.right = constructTree(d, child[1])
        return root
    
def inOrderUtil(root):
    if root is not None:
        inOrderUtil(root.left)
        print root.data,
        inOrderUtil(root.right)
        
def inOrder(root):
    print "InOrder = ",
    inOrderUtil(root)
    print 

def getAncestorsUtil(root,data,level,l):
    if root is not None:
        if root.data == data:
            getAncestors.level = level
        else:
            getAncestorsUtil(root.left, data,level + 1,l)
            if getAncestors.level is None:
                getAncestorsUtil(root.right, data,level + 1,l)
            if getAncestors.level is not None:
                if level < getAncestors.level:
                    l.append(root.data)
            
    
def getAncestors(root,data):
    l = []
    getAncestors.level = None
    getAncestorsUtil(root, data, 0, l)
    return l

def getAncestorsRecursive(root,data,l):
    if root is not None:
        if root.data != data:
            l.append(root.data)
            getAncestorsRecursive(root.left, data,l)
            l.pop()
            l.append(root.data)
            getAncestorsRecursive(root.right, data,l)
            l.pop()
            
            
        else:
            print l
            
def getAncestorRecursiveReverse(root,data,l):
    if root is not None:
        if root.data != data:
            l.appendleft(root.data)
            getAncestorRecursiveReverse(root.left, data,l)
            l.popleft()
            l.appendleft(root.data)
            getAncestorRecursiveReverse(root.right, data,l)
            l.popleft()
        else:
            print l
    
            
            
    

            
if __name__ == '__main__':
    root = constructTree(getTreeDict(), 1)
    inOrder(root)
    print getAncestors(root, 1)
    l = []
    print "____________"
    getAncestorsRecursive(root, 2,l)
    getAncestorRecursiveReverse(root, 2, deque([]))
