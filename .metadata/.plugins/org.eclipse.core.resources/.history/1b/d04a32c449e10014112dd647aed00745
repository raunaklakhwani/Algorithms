from pprint import pprint
import heapq
class UndirectedGraph:
    def __init__(self, edges):
        self.adjacencyList = {}
        for edge in edges:
            source,destination,cost = edge
            self.adjacencyList.setdefault(source,[]).append((destination,cost))
            self.adjacencyList.setdefault(destination,[]).append((source,cost))

    def prims(self):
        vertices = self.adjacencyList.keys()
        source = vertices[0]
        heap = [(0,(source,source,0))]
        heapq.heapify(heap)
        minS = []
        seen = set()
        while len(minS) != len(vertices):
            pop = heapq.heappop(heap)
            minS.append(pop[1])
            s = pop[1][0]
            seen.add(s)
            connections = self.adjacencyList[s]
            for (d,cost) in connections:
                heapq.heappush(heap, (cost,(s,d,cost)))
        del minS[0]
        print minS
        
        
if __name__ == '__main__':
    graph = UndirectedGraph([("a", "b", 7),  ("a", "c", 9),  ("a", "f", 14), ("b", "c", 10),
               ("b", "d", 15), ("c", "d", 11), ("c", "f", 2),  ("d", "e", 6),
               ("e", "f", 9)])
    pprint(graph.adjacencyList)
    graph.prims()